```python
import sys
from collections import deque

input = sys.stdin.read
lines = input().splitlines()
N, M = map(int, lines[0].split())
matrix = [list(map(int, lines[i])) for i in range(1, N + 1)]

#x, y, chance의 3차원 배열 -> chance는 벽을 부수고 방문한/벽을 부수지 않고 방문한 상태를 나타냄.
visited = [[[0]*2 for _ in range(M)] for _ in range(N)]

def bfs(x, y, d, chance):
    queue = deque([(x, y, d, chance)])
    visited[x][y][chance] = 1
    
    #상, 하 , 좌, 우 1칸 이동
    direction_vector = [(1, 0), (-1, 0), (0, 1), (0, -1)]
    
    while queue:
        cx, cy, cd, cc = queue.popleft() #현재 x,y 좌표와 현재 이동거리, 벽을 부술 수 있는지 여부
        
        # 목적지에 도착하면 현재 이동거리 반환
        if cx == N-1 and cy == M-1:
            return cd
        
        for vx, vy in direction_vector:
            newX = cx + vx
            newY = cy + vy
            
            # 유효한 좌표인지 확인
            if 0 <= newX < N and 0 <= newY < M:
                
                #벽이 없는 경우 
                if matrix[newX][newY] == 0 and visited[newX][newY][cc] == 0: 
                    visited[newX][newY][cc] = 1
                    queue.append((newX, newY, cd + 1, cc))
                
                #벽이 있는 경우 -> 벽을 부술 기회가 있는 경우 벽을 부수고 방문
                elif matrix[newX][newY] == 1 and cc == 1 and visited[newX][newY][0] == 0:
                    visited[newX][newY][0] = 1
                    queue.append((newX, newY, cd + 1, 0))          
    return -1 # 목적지에 도달할 수 없다면 -1 반환

shortest = bfs(0,0,1,1)
print(shortest)
```
